/* Selectors -> refer to the HTML elements to which CSS rules apply, they're whats being selected for each rule */

/* Universal Selector -> selects elements of any type, all elements would have the style applied */

* {
  color: purple;
}

/* Type selectors -> Will select all elements of the given element type*/

/* <!-- index.html -->

<div>Hello, World!</div>
<div>Hello again!</div>
<p>Hi...</p>
<div>Okay, bye.</div>

  */

div {
  color: white;
}

/* Here all div elements would be selected, while the p element wouldnt be */

/* Class selectors  -> Will select all elements with the given class, which is an attribute you place on an HTML element*/

/* 
<!-- index.html -->

<div class="alert-text">Please agree to our terms of service.</div>

*/

.alert-text {
  color: red;
}

/* The syntax for class selectors:
- a period after case sensitive value of the class attribute

- you can add a class to multiple elements
- you can add multiple classes to one element, separated by whitespace (class="alert-text severe-alert")
*/

/* ID selectors -> Select an element with given ID, which is another attribute you place on an HTML element */
/* Elements can only have one ID but they can have multiple classes */

/* 

<!-- index.html -->

<div id="title">My Awesome 90's Page</div>

*/

#title {
  background-color: red;
}

/* Instead of a period, like for a class, we use a hastag followed by case sensitive value of the ID attribute */
/* Use classes more and ID's sparingly

-> possible use cases
- links redirect to a section of the current page
- taking advantage of specificity 
*/

/* Grouping selector -> what if we have two groups of elements that share some of their style declarations?

*/

.read {
  color: white;
  background-color: black;
  /* several unique declarations */
}

.unread {
  color: white;
  background-color: black;
  /* several unique declarations */
}

/* both .read and .unread selectors share the color and background-color declarations,
we can reduce repetition by grouping the selectors together in a comma-separated list
*/

.read,
.unread {
  color: white;
  background-color: black;
}

.read {
   /* several unique declarations */
}

.unread {
  /* several unique declarations */
}

/* another way of chaining selectors is as a list without separation 

following html -> 
<div>
  <div class="subsection header">Latest Posts</div>
  <p class="subsection preview">This is where a preview for a post might go.</p>
</div>

we have two elements with .subsection class that have some unique styles, but what if we only want to apply a separate rule to the element that also has header as a second class, we can chain both the class selectors like so

*/

.subsection.header {
  color: red;
}

/* can also be used to chain a class that has an id */

.subsection.header {
  color: red;
}
.subsection#preview {
  color: blue;
}

/* Descendant combinator -> combinators allow us to combine multiple selectors differently than grouping or chaining, they show a relationship between the selectors, there are four different types */

/* Descendant combinator will only cause elements that match the last selector to be selected if they have an ancestor (parent, grantparent) that matches the previous selector */

/* 
So something like .ancestor .child would select an element with the class child if it has an ancestor with the class ancestor. Another way to think of it is that child will only be selected if it is nested inside ancestor, regardless of how deep that nesting is. Take a quick look at the example below and see if you can tell which elements would be selected based on the CSS rule provided:



<!-- index.html -->

<div class="ancestor">
  <!-- A -->
  <div class="contents">
    <!-- B -->
    <div class="contents"><!-- C --></div>
  </div>
</div>

<div class="contents"><!-- D --></div>


*/


.ancestor .contents {
  /* some declarations */
}

/* In the above example, the first two elements with the contents class (B and C) would be selected, but that last element (D) wouldn’t be. Was your guess correct? */

/* Properties to get started with

- color
- background color 

both of these properties can accept one of several kinds of values. A common one is a keyword, such as an actual color name like red or the transparent keyword. They also accept HEX, RGB, and HSL values

*/

p {
  color: #1100ff; 
  /* hex */
}

p {
  color: rgb(100, 0, 127);
  /* rgb example */
}

p {
  color: hsl(15, 82%, 56%);
}

/* Typography basics and text-align */
/* 
- font-family can be a single value or comma separated list of values that determine what font an element uses
- font family name like "times new roman"
- generic family name serif, we use quotes due to whitespace 

- If a browser cannot find or does not support the first font in a list, it will use the next one, then the next one and so on until it finds a supported and valid font. This is why it’s best practice to include a list of values for this property, starting with the font you want to be used most and ending with a generic font family as a fallback

font-size will, as the property name suggests, set the size of the font. When giving a value to this property, the value should not contain any whitespace, e.g. font-size: 22px has no space between “22” and “px”.

font-weight affects the boldness of text, assuming the font supports the specified weight. This value can be a keyword, e.g. font-weight: bold, or a number between 1 and 1000, e.g. font-weight: 700 (the equivalent of bold). Usually, the numeric values will be in increments of 100 up to 900, though this will depend on the font.

text-align will align text horizontally within an element, and you can use the common keywords you may have come across in word processors as the value for this property, e.g. text-align: center.
*/


/* Image height and image width */
/* 

By default, an <img> element’s height and width values will be the same as the actual image file’s height and width. If you wanted to adjust the size of the image without causing it to lose its proportions, you would use a value of “auto” for the height property and adjust the width value:

*/

img {
  height: auto;
  width: 500px;
}

/* 
These properties work in conjunction with the height and width attributes in the HTML. It’s best to include both of these properties and the HTML attributes for image elements, even if you don’t plan on adjusting the values from the image file’s original ones. When these values aren’t included, if an image takes longer to load than the rest of the page contents, it won’t take up any space on the page at first but will suddenly cause a drastic shift of the other page contents once it does load in. Explicitly stating a height and width prevents this from happening, as space will be “reserved” on the page and appear blank until the image loads.
*/

/* Adding CSS to HTML */

/* External CSS

- creating a separate file for the css and linking it inside of an HTML's opening and closing head tags with a self closing link element


<head>
  <link rel="stylesheet" href="styles.css">
</head>


- the rel attribute is required and specifies the relationship between the html file and the linked file

A couple of the pros to this method are:

It keeps our HTML and CSS separated, which results in the HTML file being smaller and making things look cleaner.
We only need to edit the CSS in one place, which is especially handy for websites with many pages that all share similar styles.
*/

/* Internal CSS
Internal CSS (or embedded CSS) involves adding the CSS within the HTML file itself instead of creating a completely separate file. With the internal method, you place all the rules inside of a pair of opening and closing <style> tags, which are then placed inside of the opening and closing <head> tags of your HTML file. Since the styles are being placed directly inside of the <head> tags, we no longer need a <link> element that the external method requires.

This method can be useful for adding unique styles to a single page of a website, but it doesn’t keep things separate like the external method, and depending on how many rules and declarations there are it can cause the HTML file to get pretty big.
*/

/* Inline CSS

  Inline CSS makes it possible to add styles directly to HTML elements, though this method isn’t as recommended:

  <div style="color: white; background-color: black;">...</div>

  The first thing to note is that we don’t actually use any selectors here, since the styles are being added directly to the opening <div> tag itself. Next, we have the style= attribute, with its value within the pair of quotation marks being the declarations.

If you need to add a unique style for a single element, this method can work just fine. Generally, though, this isn’t exactly a recommended way for adding CSS to HTML for a few reasons:

It can quickly become pretty messy once you start adding a lot of declarations to a single element, causing your HTML file to become unnecessarily bloated.

If you want many elements to have the same style, you would have to copy and paste the same style to each individual element, causing lots of unnecessary repetition and more bloat.

Any inline CSS will override the other two methods, which can cause unexpected results. (While we won’t dive into it here, this can actually be taken advantage of.)

*/