/* Flex Shorthand */

/* The flex declaration is shorthand for 3 properties that you can set on a flex item.

These properties affect how flex items size themselves within their container

flex is shorthand for:
- flex-grow
- flex-shrink
- flex-basis
*/

div {
 flex: 1; 
 /* this is basically -> flex: 1 1 0 */
}

/* FLEX GROW */
/* Flex grow expects a single number as its value, and that number is used as the flex-items "growth factor" */
/* When we applied flex:1 to every div, we were telling every div to grow the same size, if we insead add flex:2 to one of the divs then the div would grow to 2x the size of the others */

/* FLEX SHRINK

- similar to flex grow, but sets the shrink factor of a flex item.
- flex-shrink is only applied if the size of all the flex items is larger than their parent container.
- For example, if our 3 divs from above had a width declaration like: width: 100px, and .flex-container was smaller than 300px, our divs would have to shrink to fit.
- The default shrink factor is flex-shrink: 1, which means all items will shrink evenly. If you do not want an item to shrink then you can specify flex-shrink: 0;. You can also specify higher numbers to make certain items shrink at a higher rate than normal.

-An important implication to notice here is that when you specify flex-grow or flex-shrink, flex items do not necessarily respect your given values for width. In the above example, all 3 divs are given a width of 250px, but when their parent is big enough, they grow to fill it. Likewise, when the parent is too small, the default behavior is for them to shrink to fit. This is not a bug, but it could be confusing behavior if you aren’t expecting it.

*/

/* FLEX BASIS */

/* Flex basis sets the initial size of a flex item, so any sort of flex-growing or flex shrinking starts from that baseline size */

/* 

The reason we had to change it to auto in the flex-shrink example is that with the basis set to 0, those items would ignore the item’s width, and everything would shrink evenly. Using auto as a flex-basis tells the item to check for a width declaration (width: 250px).

f you noticed, we mentioned a new flex shorthand flex: auto in the previous note. However we didn’t fully introduce it. flex: auto is one of the shorthands of flex. When auto is defined as a flex keyword it is equivalent to the values of flex-grow: 1, flex-shrink: 1 and flex-basis: auto or to flex: 1 1 auto using the flex shorthand. Note that flex: auto is not the default value when using the flex shorthand despite the name being “auto” which may be slightly confusing at first. You will encounter and learn more about flex: auto and its potential use-cases when reading through the assignment section.

In practice you will likely not be using complex values for flex-grow, flex-shrink or flex-basis. Generally, you’re most likely to use declarations like flex: 1; to make divs grow evenly and flex-shrink: 0 to keep certain divs from shrinking.


*/


